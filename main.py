import os

# Constants for return values
SUCCESS = 1
FAILURE = 2
COMPANIES = 3
LOCATIONS = 4
EXIT = 5


class _Getch:
    """Gets a single character from standard input. Does not echo to the screen."""

    def __init__(self):
        try:
            self.impl = _GetchUnix()
        except ImportError:
            self.impl = _GetchWindows()

    def __call__(self):
        return self.impl()


class _GetchUnix:
    def __init__(self):
        import tty, sys, termios

    def __call__(self):
        import sys, tty, termios

        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
            if ch == "\x1b":  # start of escape sequence
                ch += sys.stdin.read(2)  # read the next two characters
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


class _GetchWindows:
    def __init__(self):
        import msvcrt

    def __call__(self):
        import msvcrt

        ch = msvcrt.getch()
        if ch == b"\xe0":  # special key prefix
            ch += msvcrt.getch()  # get the actual key code
        return ch


getch = _Getch()


def scale_down_ascii(ascii_art, scale_factor):
    """Reduces the size of the ASCII art by the given scale factor."""
    scaled_art = []
    original_height = len(ascii_art)
    original_width = len(ascii_art[0])

    new_height = original_height // scale_factor
    new_width = original_width // scale_factor

    for i in range(0, original_height, scale_factor):
        new_row = ""
        for j in range(0, original_width, scale_factor):
            new_row += ascii_art[i][j]
        scaled_art.append(new_row[:new_width])

    # Remove the last two lines to prevent scrolling issues
    return scaled_art[:-2]


def align_menu_and_art(menu, ascii_art, extra_padding=10):
    """
    Aligns the menu on the left and ASCII art on the right, centered relative to the right border.

    :param menu: List of menu items (strings).
    :param ascii_art: List of strings representing the ASCII art.
    :param extra_padding: Extra spaces between the longest menu item and the start of the art.
    :return: List of strings with the menu and art aligned.
    """
    combined_lines = []
    max_menu_length = max(len(item) for item in menu)
    art_width = len(ascii_art[0])

    # Total width assuming a typical console width of 80 characters
    total_width = max_menu_length + extra_padding + art_width

    # Align the ASCII art centered to the right border (relative to the total width)
    for i in range(max(len(menu), len(ascii_art))):
        menu_line = menu[i] if i < len(menu) else " " * max_menu_length
        art_line = ascii_art[i] if i < len(ascii_art) else ""

        # Calculate spaces needed to center the ASCII art
        left_padding = total_width - len(menu_line) - len(art_line)

        combined_line = f"{menu_line}{' ' * left_padding}{art_line}"
        combined_lines.append(combined_line)

    return combined_lines


def display_menu(menu, ascii_art, current_index):
    os.system("cls" if os.name == "nt" else "clear")
    aligned_output = align_menu_and_art(menu, ascii_art)
    for i, line in enumerate(aligned_output):
        if i < len(menu):
            if i == current_index:
                print(f"> {line}")
            else:
                print(f"  {line}")
        else:
            print(f"  {line}")


def navigate_menu(menu, ascii_art):
    current_index = 0
    while True:
        display_menu(menu, ascii_art, current_index)

        key = getch()

        if key == "\x1b[A":  # Up arrow
            current_index = (current_index - 1) % len(menu)
        elif key == "\x1b[B":  # Down arrow
            current_index = (current_index + 1) % len(menu)
        elif key == "\r":  # Enter key
            # Return corresponding value based on selection
            if current_index == 0:
                return 1
            elif current_index == 1:
                return 2
            elif current_index == 2:
                return 3
            elif current_index == 3:
                return 4
            elif current_index == 4:
                return 5
        elif key == "q":  # Quit option
            return 5


def get_user_input():
    # Your ASCII art
    ascii_art = [
        "#################(######################################################################################################################################################################################",
        "#################((#####################################################################################################################################################################################",
        "########################################################################################################################################################################################################",
        "##################((####################################################################################################################################################################################",
        "###################((((##(##############################################################################################################################################################################",
        "####################(((#(((#((((#(#(####################################################################################################################################################################",
        "######################((##((#(((#(((#(((#(##############################################################################################################################################################",
        "######################((###(((((#(((((((((((#####################################################(((((((#((((###########################################################################################",
        "#######################(#(##((((#((((((######((############################################((((((((((((((((((((((((#####################################################################################",
        "#########################((#######################((((((((########################(###(######(((#(((((((((((((((((((((##################################################################################",
        "#########################(#(###############(#(#(#(#########################(###############(#(((((((/(((((((((((((((((((((##############################################################################",
        "###########################((#((#(((((###################((###############################(((((((/***(**((((((((((((((((((((############################################################################",
        "#######################################################(##################################((((%///////(***(((((((((((((((((((###########################################################################",
        "#########################################################################################(((#//////////(/***(((((((((((((((((((#########################################################################",
        "#########################################################################################(((///////////////**/(((((((((((((((((#########################################################################",
        "#########################################################################################((/////////////(///***(((((((((((((((((########################################################################",
        "##########################################################################################/////%%%%##////////**/(/(((((((((((((((#######################################################################",
        "#########################################################################################////////////////(///***////((((((((((((((######################################################################",
        "########################################################################################(////////////////(///****///(((((((((((((#######################################################################",
        "########################################################################################/////////////////(//*****/////(((((((((((#######################################################################",
        "########################################################################################////////////////////*****//////((((((((((#######################################################################",
        "########################################################################################//////////////////*******///////((((((((((######################################################################",
        "######################################################################################(#////////////////**((*****///////(((((((((((#####################################################################",
        "################################################################################&&###((#/////////////****(&#*****/////(&((((((((((((####################################################################",
        "###############################################################################&@@&#(((#******************&#*****/////@@&(/((((((((((###################################################################",
        "##############################################################################%@@&&&(((%###%#%#%###&&&%#%(@######////@@&&%//((((((((((##################################################################",
        "##############################################################################@@@@@&%((&%%#%#%#%#%#&&&%###&#%##%#///@@@@&&&///((((((((((################################################################",
        "#############################################################################@@@@@&&%%(&#%#%#%#%#%##%#%##(&####%#//@@@@&&&%%///((((((((((###############################################################",
        "###########################################################################(@@@@@@&&&%#&#%#%#%#%#%##%#%###&####%#*&@@@@@&&%%#//(((((((((((##############################################################",
        "###########################################################################&@&@&&&&%%%#%#%#%#%#%#%##%#%##(&####%#,#%&&&&&&%%%&///((((((((((#############################################################",
        "###########################################################################//*@&&,.....&%%#%#%#%#%%%###(((&####%#*(%&&&&&&%%%/////(((((((((#########################################################%###",
        "###########################################################################%@@@&&&&%%##%#%#%#%##/@*//.,#**(((##%#.(%&&&&&&%%%%////(((((((((##########################################################%%%",
        "###########################################################################%&&&&&%%%##(%#%#%#%#%@&#&&%(&%*/*/(###,(#%&&&%%%##%////(((((((((############################################################%",
        "&&#########################################################################%@@@@@@&&%%#%%%%%%%(@@,./@/*,%#**/(##%/#&@@@@&&&%%%/////((((((((############################################################%",
        "&&&&&######################################################################%@@@@@@&&&%#//////(&@@@@@@&&&%%/,,,,,*.#&@@@@&&&%%&/////(((((((#######################################################%%%%%%%",
        "&&&&&&(((##################################################################%@@@@@@&&%%#//////,@@@@@&%%&&%%#,.,,,,.#%@@@@&&&%%%/////(((((((##############################################################",
        "&&&&&&#(((((((((###########################################################%@@@@@@&&&%#/////(,@@@@*,@*,&%%%*..,,,.#&@@@@@&&%%%*/////(((((((#############################################################",
        "&&&&&&((((((((((((((#######################################################%@@@@@@&&%%#/////,,@@@@@@@&&&%%%*,.,,,.#%@@@@&&&%%%*/////(((((((#############################################################",
        "&&&&&&&&&&&&((((((((((#####################################################%@@@@@@&&&%#/////,&@@@&&%@@@@&%#/*..,,.#%@@@@@&&%%%*/////(((((((#############################################################",
        "&&&&&&&&&&&&&%(((((((((####################################################%@@@@@@&&%%#////*,@@@@&&%@@@@&%%%*...,.#%&@@@&&&%%%*/////((((((##############################################################",
        "&&&&&&&&&&&&&&((((((((((###################################################%@@@@@@&&%%#////,&@@@@&&%@@@@&%##*,..,.(%&@@@@&&%%%*/////((((((##############################################################",
        "&&&&&&&&&&&&&&///((((((((##################################################%@@@@@@&&%%#///*,@&@@@&&%@@@@&%##&,....(%&@@@&&&%%%*/////((((((##############################################################",
        "&&&&&&&&&&&&&&&(///(((((((#################################################%@@@@@@&&%%#///,(@&@@@&&%@@@@&%%(%*,...(%&@@&&&&%%%/////(((((((##############################################################",
        "&&&&&&&&&&&&&&&&&&%//(((((#################################################%@@@@@@&&%%#///,@@&@@@&&%@@@@&&%(%&, ../#&&&&&&&%%%/////((((((###############################################################",
        "&&&&&&&&&&&&&&&&&&&&(//((((###############################################%%@@@@@@&&%%((/,(@@&@@@&&%@@@@&%%(#&,,. *#&&&&&&&%%%/////((((((###############################################################",
        "&&&&&&&&&&&&&&&&&&&&&//&@@@@%#############################################%%@@@@@@&&%%(//,@@@&@@@&&%@@@@&%%/#&&.  *(%&&&&&&%%%////(((((((###############################################################",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&((#########%#############################%%@@@@@@&&%%(/,,&@@&@@@&&%@@@@&%%/#%&.. ,/#&&&&&%%%%////((((((################################################################",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&(((####################################%%@@@@@@&&%#(*,@@@@&@@@&&%@@@@&&%/(%&(. .*(%&&&&%%%%///((((((#################################################################",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&/(((########%#########################%%@@@@@@&&%#(,/&@@@&@@@&&%@@@@&&%/(#&&...,/(%%&%%%%%//(((((((#################################################################",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#/(((#######%###############%#########%%@@@@@@&&%#,,&@@@@&@@@&&%@@@@&&%/(#%&&...*/(#%%%%#%//(((((((#################################################################",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&///(((#####%%%%%%####%%%%##%%%########%%@@@@@@&%**,&@@@@@&@@@&&%@@@@&&%/(#%&&&...,*(#%%%#%/(((((((##################################################################",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&(///((((#####################%#########%%@@@@@@**,&&@@@@@@&@@@&%%@@@@&&%/(#%&&&&&...*/(###%/((((((###################################################################",
        "&@@&&&@&&&@&&&&&&&&&&&&&&&&&&&&&&%**////(((#############%#################%%///*,*(&&@@@@@@@@@@@@&&%@@@@&&%((#%%&&&&&&.......#/((((((###################################################################",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&**////(((#####################%#########%%(,,*&&@@@@@@@@@@@@@@@&&%@@@@&&%(((#%&&&&&&&&&...*(*//((((################################################(((((#%@@@@@%######",
        "&&&&&&&&&&&&&&&&&&&&%%%&&&&&&&&&&&@*////((((########%###%###%%##%###%####/,,*&&@@@@@@&@@@@@@@@@@@&&%@@@@&&%(((#%&&&&&&%%%&%&...*///(((###########################################(((((#@@@@@@@@@@@@@@@%#",
        "&&&&&&&&&&&&&&&&&&&#%%%%%%%&&&&&&&&*////(((((##########%%#####%%%%%%###,,*&&@@@@@@@&&&%/@@@@@@@@@@@&&&%%%%%(((#%&####(%%%%%%&%&...//(((#########%#############################((((((@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%&&&**////(((((###########%%#%%#%%%%%##..&&@@@@@@@@@@@&(@@@@&&&&%%%,,,....&&&&&%%#%%%&&&%%%%%%%%%&&&..((((####################################((((((/@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&###%%%%%%&&%////((((((##############%%%%%##*.&&@@@@@@@@@@@@@@@@@@@@@&&&&%#.@.%.#%&&&&%%###%%%&%%%%%%%%%%%&%%.((((#################################((((((//@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@%%%%%&&&&///((((((##################(.@@@@@@@@@@@@@@@@@@@&@@@@@@&&%(.@.%*(%&&&&%%##(#%%%%%%%%%%%%%%###%.((((##############################(%@@@@@@@&@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%&&&#//(((((((##########################(###########@@@@@@&&%#.@.%*(#%&%%%###,*/((((((((/########(((((((################(((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%&&&(///(((((((##############@@@@@@@@@&*@@@@@@@@@@&@@@@&%%%%#,@.#*/#########/(%&&&&&&&&/@@@@&&&&&%((((((###########((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%&%*////(((((((##################(*, **,,,/#&@@&&@@@@@@&&%#,&.(*/(########/#&&#/,....,/////((((((((((((######(((&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%&***////((((((((#(#################%@@@&&%%%#((*#/&,*,. .**%.**..,/,. %& ./(###%%%###//////(((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###%%%****////((((((((((((((((((((((((((#%@@@@@&&&%%#/%(%,,..   .#.,    *,. #(,*%&&&&&&&%%%//////((((((((((((((((((#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%(###%%%,***/////(((((((%@@@@@@@@&(((((((((%@@@@@&&&%%#///*,...  ../..    ,....,**&&&&&&&&%%#//////(((((((((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@%####%%%&**////(((((@@@@@@@@@@@@@@@@/(((((%&&&&%##((//////*,.  ,,,*..... ..  ,*//&&&%%%#((/////////(((((((((((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&%%%%@&&&&&&&&&&&&@&&&(####%%%&&&&&@@&@/%@@@@@@@@@@@@@@@@@@@//((&&@@@@@@&&&&%/(( .....  ,. ....... ///@@@@@&&&&%%%&//////((((((((///%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&#((####%%%&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@//@&@@@@@@@&@&%%(((((///////.**//////(((&@@@%&@&&&%%&@&//////(/////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "%%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&###%%%&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@*&@&@@@@@@@&&&%%%(((((((((((.(((((((((((@@@@@&@&&&%%%@@///////////////*/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&%%",
        "%%%%%%%%%%%%%%%%%%%&&&&&&&&&&&&&&&&@&#%%%&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@*///......    *(((((((((((((((((((((((((((....,,,....//////////////****%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&%%%%",
        "%%%%%%%%%%%%%%%%&%%%&&&&&&&&&&&&&&&&&%%%%&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@%,***,,.......(((((((((((((((((((((((((,,,,,,.......///////////*****%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&%%%%",
        "%@&&&&%%%%%%%%%%&%&&&&&&&&&&&&&&&&@&&%%%%%%&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@*##%%%%((,(((((((((((((((((((((((((((((*##%%%((,*//////////*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&%%%%%%",
        "&&&&&&&&%%%%%@@&&%%&&&&&&&&&&&&&&&&&&##%%%%%%%%&&&&&&&&&&&&&@@@@@@@@@@@@@@@/#%%%&&&%#(,(((((((((((((((((((((((((((/#%%%&&&&//*///////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&%%%%%%%&&&%%%%%%%%",
        "&&&&&&&&%&&&&&&&&&&%%&&&&&&&&&&&&&&&&######%%%%%%%%%%&&&&&&&&&&@@@@@@@@@@@&*#%&&&&&&&(,*(((((((((((((((((((((((((/(#%&&&&&&/(*//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&@&&&%%%%%%%%%%%%%%%%%%%%%%",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#############%%%%%%%&&&&&&&&&@@@@@@@@@**#%&&&&#(,*/((((((((((((((((((((((((((*/#&&&&&//,*//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&&&&&&&%&%%%%%%%%%%%%%%%%#####",
        "&&&&&&&&&&&&&&&&&&&&&&&&%&&&&&&&&&&&&((((((((#@&@&&####%%%%%%&&&&&&&@@@@@@@@@(*#%&#,,*///////////(((((((((((((((((/(*/#&#(,**///////(@@@@@@@@@@&@&&&&&&&&&&&@@&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%%%%######((((",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%&&&@@&&@&@&@&&@@@@#%%%%%&&&&&&&&&&&&&&&&%//*(**//////////////////////////////(&/#///***********&@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%####(#@@@@@%",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&&&&%#&&@&&&@@&&&&&&&@@@&###%%%%%%%&&&&&&@@@&&&&%#%**********//////////////////////(&&%%##**********/&&&&%%%%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%#####%@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&&&@&&&@@&&@@@&&&&@&&&&&&&###%@@@&#%%&&@@@@@@&@@@&%,,,,**********//////////////////%&@@@%%%%&&&&&&&#%%%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%%###(((@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&&&&&&&&@&&&@@@@&&&&&@&&&&&&&&&&&&&&&&&&&&&&&&@@@@%#(,#%&&&&&&*****/////////////***&&@@@&%#%%%&&&&&&&&%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@####@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&&&&&&&@@&&&@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%((##%%%&&&&(****///////////(@@@&%%%%%%%##%%&@@@&@@@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&&&&&&&&@&&&@@@@&@&&&&&&%&%&&%&&%%%%%%&&&&&&&&&&&&&&(//(##%%%%&&&&&&@@@///////@@@@%%&&&&&&%&#%%&@@@@@@@@@@@@@@@&&&&&&&&&&&&&&&&&&%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@&@@@@@@@@@@@@@@@&&&&&%%%%%%%%%%&&&&&&&&&&&&&&&&&(/*//(###%%%%&&&&&&&@&@@@@@@@@&&&&&&&&&&&&%%&&@@@@@@@@@@@@@@@&&&&&&&&&&&&&&%%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&&&&&&&&@&&&@@@@&&&@&&&&&%%%%%%&%%&&&&&&&&&&&&&&&&&&&&&&&#%%(##%%%%&&&&&&&&&&@&&&&&&&&&&&&&&&&&&&%&&&@@@@@@@@@@@@@@@@@@@&&&&&%%%%#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&&&&&&&@@&&&@@@@&@&@@&@&@@&@&@@@@@@&&&&&&&&&&&&&&&&&&&&&&#%#((#%&&&&%%%%&&&&&&&&&&&&&&&&&&&&&&&&#%&&&&&&&&&&@@@@@@@@@@@@@@&%%###%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@&&&&&&&&@&&&@@@@&@&@@@@@@@&@&@@@@@&&&&&&&&&&&&&&&&&&&&&&&#####%%%%%%%%&&&%&&&&&&&&&&&&&&&&&&&&&&(##%%&&&&%%%%%&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&&&@@@@@@@&&&&@&&&@&&&@@&&@@@@@&@&@&&&%%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%####%%%%%&&&&&&&&&&&&&&&&&&&&&&#&&&&%%%%%%%%&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@&&&@&&&@@@@&@&&&%%%%%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%######%%%%%%&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%%%&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&&&&&@@@@@&&&&&&&@@@@@@@@@@@@@@@@@@@@@&&&&@&@@@@&@&@%%%%%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%(((((####%%%%%&&&&&&&&&&&&&&&&&&&&&&%%%%%%%###%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&@@@@@@@@@@@@@@@",
        "&&&@@@@@@@@@&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&%%%%%%%%&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%(((######%%%%&&&&&&&&&&&&&&&&&&&&%%%%%%%#((###@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%####%&&%%%%%%&&&&&&&&@&&&&&&&&&&&&&&&&&&&&&&&&&&&&%%%%%%%%%%#########%%%%&&&@@&&&&&&&&&&&&%%%%%%%&#/#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&@@@@@##%&@@@&%%%%&&&&&&&&&&&&&&@&&@@&&&&&&&&&&&&%%%%%%%%%%%######%@&&&@%&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%&&&&&&&&&&&&&&&@@@@@&&&&&&&&&&&%%%%%%%%%%###%@@&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&%&&&&&&&&&&&@@@@@@@@@@&%%%%%%%%%%%%%%%%####@@@@&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#%%%%&&&&&&&@@@@@@@@@@@@&#&&&&@@%%%%%####((#@&&@&&&@&&&&&&&&&&&&&&&&@&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%&@@@@@@@@@@@@@@@@&%%%&&&@@@%@@@@@@@@&@&&@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&@@@@@@@@@@&&&@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
        "@&&@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&&&&@&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@",
    ]

    menu = [
        "1.) View Successful missions",
        "2.) View Failed Missions",
        "3.) View Unique Companies",
        "4.) View Unique Locations",
        "5.) Exit",
    ]

    # Scaling down the ASCII art by a factor of 4
    scaled_art = scale_down_ascii(ascii_art, 4)

    # Start the navigation
    result = navigate_menu(menu, scaled_art)

    # Return value will be one of the constants: SUCCESS, FAILURE, COMPANIES, LOCATIONS, EXIT
    return result


from csv import reader


# Load mission data from the CSV file
def load_mission_data():
    mission_data = []
    with open("mission-data.csv", mode="rt", newline="") as csv_file:
        mission_reader = reader(csv_file)
        for row in mission_reader:
            company, location, date, status = row
            data = (date, location, company, status)
            mission_data.append(data)
    return mission_data


# View unique companies
def view_unique_companies(mission_data):
    companies = set()
    for data in mission_data:
        _, _, company, _ = data
        companies.add(company)
    print("Unique Companies:")
    for company in sorted(companies):
        print(f"- {company}")
    print()


# View successful or failed missions
def view_missions(mission_data, keyword):
    missions = []
    for data in mission_data:
        date, location, company, status = data
        if status.lower() == keyword.lower():
            missions.append(f"Company: {company}\nDate: {date}\nLocation: {location}\n")
    keyword_str = "Successful" if keyword.lower() == "success" else "Failed"
    print(f"{keyword_str} Missions:")
    if missions:
        for mission in missions:
            print(mission)
            print("-" * 30)
    else:
        print(f"No {keyword_str.lower()} missions found.")
    print()


# View unique locations
def view_unique_locations(mission_data):
    locations = set()
    for data in mission_data:
        _, location, _, _ = data
        locations.add(location)
    print("Unique Locations:")
    for location in sorted(locations):
        print(f"- {location}")
    print()


# Menu options
options = """
1.) View Successful missions                       ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠃⢰⠆⠀⠀⠀⠀⠀
2.) View Failed Missions                              ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⣿⣿⣶⣤⡀⠀⣿⣷⡀⠀⠀
3.) View Unique Companies    ⠀⠀⠀⠀⠀                    ⠀⠀⣀⣴⣿⡇⢀⣤⣾⣿⣿⠿⠛⠉⠉⠉⠙⠻⣿⣷⡄⠘⣿⣷⠀⠀
4.) View Unique Locations            ⠀⠀⠀⠀⠀⠀⠀          ⠀⠸⡿⠛⣡⣶⣿⣿⠟⠋⢀⣠⣶⣶⣶⣄⠀⠀⣿⣿⣇⠀⣻⣿⠀⠀
5.) Exit       ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                        ⠀⠀⠀⣾⣿⡿⠋⠁⢀⣴⣿⣿⠿⢻⣿⣿⠀⠀⣿⣿⡏⢀⣿⡿⠀⠀
                       ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀            ⠀⣠⣄⠈⠉⠀⢀⣴⣿⣿⠟⠁⠀⣾⣿⡟⠀⣰⣿⣿⠃⠘⠿⠃⠀⠀
           ⠀            ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀            ⣀⠙⠋⠀⠀⢀⣾⣿⡿⠁⢀⣀⠶⠈⠉⠀⣴⣿⣿⠃⠀⠀⠀⡀⠙⠃
           ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀            ⠀⠀⠀⠀⠀            ⠙⠀⣴⣦⠀⣼⣿⡿⠀⢠⣿⣿⠇⠀⣠⣾⣿⡿⠁⠀⢀⣀⠸⠿⠀⠀
           ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                        ⠀⢸⣿⠇⢸⣿⣿⠁⠀⣿⣿⣯⣴⣾⣿⡿⠋⠀⣠⣾⣿⣿⠃⠀⠀⠀
                       ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀            ⠀⢾⣿⠀⢸⣿⣿⡀⠀⠘⠻⠿⠿⠟⠉⣀⣤⣾⣿⡿⠋⣡⣤⡀⠀⠀
                       ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀            ⠀⠸⣿⣆⠀⢻⣿⣷⣄⣀⣀⣀⣠⣴⣾⣿⡿⠟⠋⣴⣾⡿⠛⠀⠀⠀
                       ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀            ⠀⠀⠹⣿⠇⠀⠙⠻⣿⣿⣿⣿⣿⠿⠛⠉⠀⠀⠀⠙⠁⠀⠀⠀⠀⠀
           ⠀            ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀            ⠀⠀⠀⠀⠀⠶⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
           ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀            ⠀⠀⠀⠀⠀            ⠀⠀⠀⠀⠀⠀⠈⠉⠀⠀⠀⠀⠀
> ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
"""


SUCCESS = 1
FAILURE = 2
COMPANIES = 3
LOCATIONS = 4
EXIT = 5

# Main program loop
mission_data = load_mission_data()

while True:
    user_choice = get_user_input()

    if user_choice == SUCCESS:
        view_missions(mission_data, "Success")
    elif user_choice == FAILURE:
        view_missions(mission_data, "Failure")
    elif user_choice == COMPANIES:
        view_unique_companies(mission_data)
    elif user_choice == LOCATIONS:
        view_unique_locations(mission_data)
    elif user_choice == EXIT:
        print("Exiting the program.")
        break
    else:
        print("Invalid choice. Please select a valid option.")
    input("Press enter to continue")
